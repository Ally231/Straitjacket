using System;

namespace Errors
{
    internal class Program
    {
        // Провести рефакторинг (желательно два раза - в начале , и в конце после решенеия)
        // Исправить ошибки которые есть, пользуйся дебагингом, выпиши оишбки которые встречаются 
        // Поэксперементировать с преобразованием типов, попробовать также метод TryParse 
        public static void Main(string[] args)
        {
            //Смотрим какие ошибки получаем при вызове разных парсов
            sdsd();
        }

        //  Задание: на консоль вводятся различные данные, программа должна уметь их парсить без выкидывания ошибок
        // и говорить пользователю что он ввел. Используй в задаче конструкцию try/catch, метод tryParce и Enum
        
        //Доп задание : покрыть метод тестами 
        public static void sdsd()
        {
            
            string str = "hello";

            //Методы Convert имеют много перегрузок, выполняющих конвертацию разных типов, тогда как Parse конвертирует только строки
            // var resParse = double.Parse(str);

            //Какую ошибку тут получим если раскоментируем? 
            // var resParse = double.Parse(1);

            //Получим ли тут ошибку?
            
            //double: хранит число с плавающей точкой от ±5.0*10-324 до ±1.7*10308 и занимает 8 байта
            long r = (long)Convert.ToDouble(str);
            Console.WriteLine(r);


            // Также некоторые методы Convert имеют большую функциональность,
            // например Convert.ToInt32 (string, int) поддерживает четыре системы счисления - двоичную, восьмеричную, десятичную и шестнадцатеричную, а int.Parse - только две.

            //Получим ли тут ошибку ? 
            var r1 = Convert.ToInt16("adsd");
            Console.WriteLine(r1);

            var r2 = Convert.ToInt64("678");
            Console.WriteLine(r2);
        }
    }
}




//Шаблон для тестов :
// легкий пример смотри в ActualizationKepOptionsExtensionTests

// тест кейсы 


// метод внутри которого вызывается тестируемые метод 
{
    //Arrange
//   
//
//     //Act
//   
//
//     //Assert
//    
    
}
